name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  TF_VERSION: '1.6.0'
  TFSEC_VERSION: '1.28.1'
  TFLINT_VERSION: '0.48.0'
  TERRAFORM_DOCS_VERSION: '0.16.0'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init -backend=false

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: ${{ env.TFLINT_VERSION }}

      - name: TFLint
        id: tflint
        run: tflint --init && tflint
        continue-on-error: true

      - name: Setup TFSec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          tfsec_version: ${{ env.TFSEC_VERSION }}

      - name: TFSec Security Scan
        id: tfsec
        run: tfsec .
        continue-on-error: true

      - name: Comment PR
        uses: actions/github-script@v8
        if: github.event_name == 'pull_request'
        with:
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### TFLint ü§ñ\`${{ steps.tflint.outcome }}\`
            #### TFSec Security Scan üîí\`${{ steps.tfsec.outcome }}\`

            <details><summary>Show Detail</summary>

            \`\`\`
            Terraform Format: ${{ steps.fmt.outcome }}
            Terraform Init: ${{ steps.init.outcome }}
            Terraform Validate: ${{ steps.validate.outcome }}
            TFLint: ${{ steps.tflint.outcome }}
            TFSec: ${{ steps.tfsec.outcome }}
            \`\`\`

            </details>`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup Terraform Docs
        uses: terraform-docs/setup@v1
        with:
          terraform-docs-version: ${{ env.TERRAFORM_DOCS_VERSION }}

      - name: Generate Terraform Docs
        run: |
          terraform-docs markdown table --output-file README.md --output-mode inject .
        continue-on-error: true

      - name: Check for Documentation Changes
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "Documentation changes detected:"
            git diff
            exit 1
          else
            echo "No documentation changes detected."
          fi

  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        example: [complete, simple]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: |
          cd examples/${{ matrix.example }}
          terraform init -backend=false

      - name: Terraform Plan
        run: |
          cd examples/${{ matrix.example }}
          terraform plan -no-color

      - name: Terraform Validate
        run: |
          cd examples/${{ matrix.example }}
          terraform validate -no-color

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [lint, docs, test, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup Terraform Docs
        uses: terraform-docs/setup@v1
        with:
          terraform-docs-version: ${{ env.TERRAFORM_DOCS_VERSION }}

      - name: Generate Terraform Docs
        run: terraform-docs markdown table --output-file README.md --output-mode inject .

      - name: Commit Documentation Updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git diff --staged --quiet || git commit -m "docs: update terraform-docs"
          git push

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
